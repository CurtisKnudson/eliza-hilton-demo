// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: eliza/v1/eliza.proto

package elizav1connect

import (
	context "context"
	errors "errors"
	v1 "github.com/CurtisKnudson/eliza-hilton-demo/backend/gen/proto/go/eliza/v1"
	connect_go "github.com/bufbuild/connect-go"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ElizaServiceName is the fully-qualified name of the ElizaService service.
	ElizaServiceName = "eliza.v1.ElizaService"
)

// ElizaServiceClient is a client for the eliza.v1.ElizaService service.
type ElizaServiceClient interface {
	// RPC declaration initiates an API boilerplate when the code is generate. It accepts a request and a response.
	Talk(context.Context, *connect_go.Request[v1.TalkRequest]) (*connect_go.Response[v1.TalkResponse], error)
}

// NewElizaServiceClient constructs a client for the eliza.v1.ElizaService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewElizaServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ElizaServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &elizaServiceClient{
		talk: connect_go.NewClient[v1.TalkRequest, v1.TalkResponse](
			httpClient,
			baseURL+"/eliza.v1.ElizaService/Talk",
			opts...,
		),
	}
}

// elizaServiceClient implements ElizaServiceClient.
type elizaServiceClient struct {
	talk *connect_go.Client[v1.TalkRequest, v1.TalkResponse]
}

// Talk calls eliza.v1.ElizaService.Talk.
func (c *elizaServiceClient) Talk(ctx context.Context, req *connect_go.Request[v1.TalkRequest]) (*connect_go.Response[v1.TalkResponse], error) {
	return c.talk.CallUnary(ctx, req)
}

// ElizaServiceHandler is an implementation of the eliza.v1.ElizaService service.
type ElizaServiceHandler interface {
	// RPC declaration initiates an API boilerplate when the code is generate. It accepts a request and a response.
	Talk(context.Context, *connect_go.Request[v1.TalkRequest]) (*connect_go.Response[v1.TalkResponse], error)
}

// NewElizaServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewElizaServiceHandler(svc ElizaServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/eliza.v1.ElizaService/Talk", connect_go.NewUnaryHandler(
		"/eliza.v1.ElizaService/Talk",
		svc.Talk,
		opts...,
	))
	return "/eliza.v1.ElizaService/", mux
}

// UnimplementedElizaServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedElizaServiceHandler struct{}

func (UnimplementedElizaServiceHandler) Talk(context.Context, *connect_go.Request[v1.TalkRequest]) (*connect_go.Response[v1.TalkResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("eliza.v1.ElizaService.Talk is not implemented"))
}
